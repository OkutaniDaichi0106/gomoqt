// Code generated by MockGen. DO NOT EDIT.
// Source: ../session.go

// Package mock_moqt is a generated GoMock package.
package mock_moqt

import (
	context "context"
	reflect "reflect"

	moqt "github.com/OkutaniDaichi0106/gomoqt/moqt"
	gomock "github.com/golang/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// AcceptAnnounceStream mocks base method.
func (m *MockSession) AcceptAnnounceStream(arg0 context.Context, arg1 func(moqt.AnnounceConfig) error) (moqt.SendAnnounceStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptAnnounceStream", arg0, arg1)
	ret0, _ := ret[0].(moqt.SendAnnounceStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptAnnounceStream indicates an expected call of AcceptAnnounceStream.
func (mr *MockSessionMockRecorder) AcceptAnnounceStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptAnnounceStream", reflect.TypeOf((*MockSession)(nil).AcceptAnnounceStream), arg0, arg1)
}

// AcceptFetchStream mocks base method.
func (m *MockSession) AcceptFetchStream(arg0 context.Context, arg1 func(moqt.FetchRequest) error) (moqt.ReceiveFetchStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptFetchStream", arg0, arg1)
	ret0, _ := ret[0].(moqt.ReceiveFetchStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptFetchStream indicates an expected call of AcceptFetchStream.
func (mr *MockSessionMockRecorder) AcceptFetchStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptFetchStream", reflect.TypeOf((*MockSession)(nil).AcceptFetchStream), arg0, arg1)
}

// AcceptGroupStream mocks base method.
func (m *MockSession) AcceptGroupStream(arg0 context.Context, arg1 moqt.SendSubscribeStream) (moqt.ReceiveGroupStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptGroupStream", arg0, arg1)
	ret0, _ := ret[0].(moqt.ReceiveGroupStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptGroupStream indicates an expected call of AcceptGroupStream.
func (mr *MockSessionMockRecorder) AcceptGroupStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptGroupStream", reflect.TypeOf((*MockSession)(nil).AcceptGroupStream), arg0, arg1)
}

// AcceptInfoStream mocks base method.
func (m *MockSession) AcceptInfoStream(arg0 context.Context, arg1 func(moqt.InfoRequest) (moqt.Info, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInfoStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptInfoStream indicates an expected call of AcceptInfoStream.
func (mr *MockSessionMockRecorder) AcceptInfoStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInfoStream", reflect.TypeOf((*MockSession)(nil).AcceptInfoStream), arg0, arg1)
}

// AcceptSubscribeStream mocks base method.
func (m *MockSession) AcceptSubscribeStream(arg0 context.Context, arg1 func(moqt.SubscribeConfig) (moqt.Info, error)) (moqt.ReceiveSubscribeStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptSubscribeStream", arg0, arg1)
	ret0, _ := ret[0].(moqt.ReceiveSubscribeStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptSubscribeStream indicates an expected call of AcceptSubscribeStream.
func (mr *MockSessionMockRecorder) AcceptSubscribeStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptSubscribeStream", reflect.TypeOf((*MockSession)(nil).AcceptSubscribeStream), arg0, arg1)
}

// OpenAnnounceStream mocks base method.
func (m *MockSession) OpenAnnounceStream(arg0 moqt.AnnounceConfig) (moqt.ReceiveAnnounceStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenAnnounceStream", arg0)
	ret0, _ := ret[0].(moqt.ReceiveAnnounceStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenAnnounceStream indicates an expected call of OpenAnnounceStream.
func (mr *MockSessionMockRecorder) OpenAnnounceStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenAnnounceStream", reflect.TypeOf((*MockSession)(nil).OpenAnnounceStream), arg0)
}

// OpenFetchStream mocks base method.
func (m *MockSession) OpenFetchStream(arg0 moqt.FetchRequest) (moqt.SendFetchStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFetchStream", arg0)
	ret0, _ := ret[0].(moqt.SendFetchStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFetchStream indicates an expected call of OpenFetchStream.
func (mr *MockSessionMockRecorder) OpenFetchStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFetchStream", reflect.TypeOf((*MockSession)(nil).OpenFetchStream), arg0)
}

// OpenGroupStream mocks base method.
func (m *MockSession) OpenGroupStream(arg0 moqt.ReceiveSubscribeStream, arg1 moqt.GroupSequence) (moqt.SendGroupStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenGroupStream", arg0, arg1)
	ret0, _ := ret[0].(moqt.SendGroupStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenGroupStream indicates an expected call of OpenGroupStream.
func (mr *MockSessionMockRecorder) OpenGroupStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenGroupStream", reflect.TypeOf((*MockSession)(nil).OpenGroupStream), arg0, arg1)
}

// OpenInfoStream mocks base method.
func (m *MockSession) OpenInfoStream(arg0 moqt.InfoRequest) (moqt.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenInfoStream", arg0)
	ret0, _ := ret[0].(moqt.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenInfoStream indicates an expected call of OpenInfoStream.
func (mr *MockSessionMockRecorder) OpenInfoStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenInfoStream", reflect.TypeOf((*MockSession)(nil).OpenInfoStream), arg0)
}

// OpenSubscribeStream mocks base method.
func (m *MockSession) OpenSubscribeStream(arg0 moqt.SubscribeConfig) (moqt.SendSubscribeStream, moqt.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSubscribeStream", arg0)
	ret0, _ := ret[0].(moqt.SendSubscribeStream)
	ret1, _ := ret[1].(moqt.Info)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OpenSubscribeStream indicates an expected call of OpenSubscribeStream.
func (mr *MockSessionMockRecorder) OpenSubscribeStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSubscribeStream", reflect.TypeOf((*MockSession)(nil).OpenSubscribeStream), arg0)
}

// Terminate mocks base method.
func (m *MockSession) Terminate(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Terminate", arg0)
}

// Terminate indicates an expected call of Terminate.
func (mr *MockSessionMockRecorder) Terminate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockSession)(nil).Terminate), arg0)
}

// UpdateSession mocks base method.
func (m *MockSession) UpdateSession(bitrate uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", bitrate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockSessionMockRecorder) UpdateSession(bitrate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockSession)(nil).UpdateSession), bitrate)
}
