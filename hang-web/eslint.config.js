import js from '@eslint/js';
import tseslint from '@typescript-eslint/eslint-plugin';
import tsparser from '@typescript-eslint/parser';

export default [
  js.configs.recommended,
  {
    files: ['src/**/*.ts'],
    languageOptions: {
      parser: tsparser,
      ecmaVersion: 2020,
      sourceType: 'module',
      globals: {
        // Browser globals
        console: 'readonly',
        window: 'readonly',
        document: 'readonly',
        navigator: 'readonly',
        self: 'readonly',
        URL: 'readonly',
        performance: 'readonly',
        requestAnimationFrame: 'readonly',
        cancelAnimationFrame: 'readonly',
        customElements: 'readonly',
        queueMicrotask: 'readonly',
        // Web APIs
        AudioContext: 'readonly',
        AudioWorkletNode: 'readonly',
        AudioWorkletProcessor: 'readonly',
        AudioWorkletNodeOptions: 'readonly',
        registerProcessor: 'readonly',
        sampleRate: 'readonly',
        currentFrame: 'readonly',
        AudioData: 'readonly',
        AudioDataInit: 'readonly',
        AudioEncoder: 'readonly',
        AudioEncoderConfig: 'readonly',
        AudioDecoder: 'readonly',
        AudioDecoderConfig: 'readonly',
        EncodedAudioChunk: 'readonly',
        GainNode: 'readonly',
        MediaStream: 'readonly',
        MediaStreamTrack: 'readonly',
        MediaStreamAudioSourceNode: 'readonly',
        VideoFrame: 'readonly',
        VideoEncoder: 'readonly',
        VideoEncoderConfig: 'readonly',
        VideoDecoder: 'readonly',
        VideoDecoderConfig: 'readonly',
        EncodedVideoChunk: 'readonly',
        HTMLVideoElement: 'readonly',
        HTMLCanvasElement: 'readonly',
        HTMLDivElement: 'readonly',
        HTMLElement: 'readonly',
        CanvasRenderingContext2D: 'readonly',
        DOMHighResTimeStamp: 'readonly',
        CustomEvent: 'readonly',
        IntersectionObserver: 'readonly',
        ReadableStream: 'readonly',
        ReadableStreamDefaultReader: 'readonly',
        ReadableStreamReadResult: 'readonly',
        TextEncoder: 'readonly',
        TextDecoder: 'readonly',
        AllowSharedBufferSource: 'readonly',
        JsonEncoder: 'readonly',
      },
    },
    plugins: {
      '@typescript-eslint': tseslint,
    },
    rules: {
      ...tseslint.configs.recommended.rules,
      '@typescript-eslint/consistent-type-imports': ['error', { prefer: 'type-imports' }],
      '@typescript-eslint/no-import-type-side-effects': 'error',
    },
  },
];
