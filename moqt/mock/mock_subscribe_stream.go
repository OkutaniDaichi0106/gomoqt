// Code generated by MockGen. DO NOT EDIT.
// Source: ../subscribe_stream.go

// Package mock_moqt is a generated GoMock package.
package mock_moqt

import (
	reflect "reflect"

	moqt "github.com/OkutaniDaichi0106/gomoqt/moqt"
	gomock "github.com/golang/mock/gomock"
)

// MockSendSubscribeStream is a mock of SendSubscribeStream interface.
type MockSendSubscribeStream struct {
	ctrl     *gomock.Controller
	recorder *MockSendSubscribeStreamMockRecorder
}

// MockSendSubscribeStreamMockRecorder is the mock recorder for MockSendSubscribeStream.
type MockSendSubscribeStreamMockRecorder struct {
	mock *MockSendSubscribeStream
}

// NewMockSendSubscribeStream creates a new mock instance.
func NewMockSendSubscribeStream(ctrl *gomock.Controller) *MockSendSubscribeStream {
	mock := &MockSendSubscribeStream{ctrl: ctrl}
	mock.recorder = &MockSendSubscribeStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendSubscribeStream) EXPECT() *MockSendSubscribeStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSendSubscribeStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSendSubscribeStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSendSubscribeStream)(nil).Close))
}

// CloseWithError mocks base method.
func (m *MockSendSubscribeStream) CloseWithError(arg0 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWithError", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWithError indicates an expected call of CloseWithError.
func (mr *MockSendSubscribeStreamMockRecorder) CloseWithError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWithError", reflect.TypeOf((*MockSendSubscribeStream)(nil).CloseWithError), arg0)
}

// ReceiveSubscribeGap mocks base method.
func (m *MockSendSubscribeStream) ReceiveSubscribeGap() (moqt.SubscribeGap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveSubscribeGap")
	ret0, _ := ret[0].(moqt.SubscribeGap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveSubscribeGap indicates an expected call of ReceiveSubscribeGap.
func (mr *MockSendSubscribeStreamMockRecorder) ReceiveSubscribeGap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveSubscribeGap", reflect.TypeOf((*MockSendSubscribeStream)(nil).ReceiveSubscribeGap))
}

// SubscribeConfig mocks base method.
func (m *MockSendSubscribeStream) SubscribeConfig() moqt.SubscribeConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeConfig")
	ret0, _ := ret[0].(moqt.SubscribeConfig)
	return ret0
}

// SubscribeConfig indicates an expected call of SubscribeConfig.
func (mr *MockSendSubscribeStreamMockRecorder) SubscribeConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeConfig", reflect.TypeOf((*MockSendSubscribeStream)(nil).SubscribeConfig))
}

// SubscribeID mocks base method.
func (m *MockSendSubscribeStream) SubscribeID() moqt.SubscribeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeID")
	ret0, _ := ret[0].(moqt.SubscribeID)
	return ret0
}

// SubscribeID indicates an expected call of SubscribeID.
func (mr *MockSendSubscribeStreamMockRecorder) SubscribeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeID", reflect.TypeOf((*MockSendSubscribeStream)(nil).SubscribeID))
}

// UpdateSubscribe mocks base method.
func (m *MockSendSubscribeStream) UpdateSubscribe(arg0 moqt.SubscribeUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscribe indicates an expected call of UpdateSubscribe.
func (mr *MockSendSubscribeStreamMockRecorder) UpdateSubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscribe", reflect.TypeOf((*MockSendSubscribeStream)(nil).UpdateSubscribe), arg0)
}

// MockReceiveSubscribeStream is a mock of ReceiveSubscribeStream interface.
type MockReceiveSubscribeStream struct {
	ctrl     *gomock.Controller
	recorder *MockReceiveSubscribeStreamMockRecorder
}

// MockReceiveSubscribeStreamMockRecorder is the mock recorder for MockReceiveSubscribeStream.
type MockReceiveSubscribeStreamMockRecorder struct {
	mock *MockReceiveSubscribeStream
}

// NewMockReceiveSubscribeStream creates a new mock instance.
func NewMockReceiveSubscribeStream(ctrl *gomock.Controller) *MockReceiveSubscribeStream {
	mock := &MockReceiveSubscribeStream{ctrl: ctrl}
	mock.recorder = &MockReceiveSubscribeStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiveSubscribeStream) EXPECT() *MockReceiveSubscribeStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockReceiveSubscribeStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReceiveSubscribeStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReceiveSubscribeStream)(nil).Close))
}

// CloseWithError mocks base method.
func (m *MockReceiveSubscribeStream) CloseWithError(arg0 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWithError", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWithError indicates an expected call of CloseWithError.
func (mr *MockReceiveSubscribeStreamMockRecorder) CloseWithError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWithError", reflect.TypeOf((*MockReceiveSubscribeStream)(nil).CloseWithError), arg0)
}

// SendSubscribeGap mocks base method.
func (m *MockReceiveSubscribeStream) SendSubscribeGap(arg0 moqt.SubscribeGap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSubscribeGap", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSubscribeGap indicates an expected call of SendSubscribeGap.
func (mr *MockReceiveSubscribeStreamMockRecorder) SendSubscribeGap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSubscribeGap", reflect.TypeOf((*MockReceiveSubscribeStream)(nil).SendSubscribeGap), arg0)
}

// SubscribeConfig mocks base method.
func (m *MockReceiveSubscribeStream) SubscribeConfig() moqt.SubscribeConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeConfig")
	ret0, _ := ret[0].(moqt.SubscribeConfig)
	return ret0
}

// SubscribeConfig indicates an expected call of SubscribeConfig.
func (mr *MockReceiveSubscribeStreamMockRecorder) SubscribeConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeConfig", reflect.TypeOf((*MockReceiveSubscribeStream)(nil).SubscribeConfig))
}

// SubscribeID mocks base method.
func (m *MockReceiveSubscribeStream) SubscribeID() moqt.SubscribeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeID")
	ret0, _ := ret[0].(moqt.SubscribeID)
	return ret0
}

// SubscribeID indicates an expected call of SubscribeID.
func (mr *MockReceiveSubscribeStreamMockRecorder) SubscribeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeID", reflect.TypeOf((*MockReceiveSubscribeStream)(nil).SubscribeID))
}
