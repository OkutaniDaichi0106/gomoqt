// Code generated by MockGen. DO NOT EDIT.
// Source: ../group_writer.go
//
// Generated by this command:
//
//	mockgen -source=../group_writer.go -destination=./mock_group_writer.go
//

// Package mock_moqt is a generated GoMock package.
package mock_moqt

import (
	reflect "reflect"
	time "time"

	moqt "github.com/OkutaniDaichi0106/gomoqt/moqt"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupWriter is a mock of GroupWriter interface.
type MockGroupWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGroupWriterMockRecorder
	isgomock struct{}
}

// MockGroupWriterMockRecorder is the mock recorder for MockGroupWriter.
type MockGroupWriterMockRecorder struct {
	mock *MockGroupWriter
}

// NewMockGroupWriter creates a new mock instance.
func NewMockGroupWriter(ctrl *gomock.Controller) *MockGroupWriter {
	mock := &MockGroupWriter{ctrl: ctrl}
	mock.recorder = &MockGroupWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupWriter) EXPECT() *MockGroupWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockGroupWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGroupWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGroupWriter)(nil).Close))
}

// GroupSequence mocks base method.
func (m *MockGroupWriter) GroupSequence() moqt.GroupSequence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupSequence")
	ret0, _ := ret[0].(moqt.GroupSequence)
	return ret0
}

// GroupSequence indicates an expected call of GroupSequence.
func (mr *MockGroupWriterMockRecorder) GroupSequence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupSequence", reflect.TypeOf((*MockGroupWriter)(nil).GroupSequence))
}

// WriteFrame mocks base method.
func (m *MockGroupWriter) WriteFrame(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFrame", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFrame indicates an expected call of WriteFrame.
func (mr *MockGroupWriterMockRecorder) WriteFrame(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFrame", reflect.TypeOf((*MockGroupWriter)(nil).WriteFrame), arg0)
}

// MockSendGroupStream is a mock of SendGroupStream interface.
type MockSendGroupStream struct {
	ctrl     *gomock.Controller
	recorder *MockSendGroupStreamMockRecorder
	isgomock struct{}
}

// MockSendGroupStreamMockRecorder is the mock recorder for MockSendGroupStream.
type MockSendGroupStreamMockRecorder struct {
	mock *MockSendGroupStream
}

// NewMockSendGroupStream creates a new mock instance.
func NewMockSendGroupStream(ctrl *gomock.Controller) *MockSendGroupStream {
	mock := &MockSendGroupStream{ctrl: ctrl}
	mock.recorder = &MockSendGroupStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendGroupStream) EXPECT() *MockSendGroupStreamMockRecorder {
	return m.recorder
}

// CancelWrite mocks base method.
func (m *MockSendGroupStream) CancelWrite(arg0 moqt.GroupErrorCode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CancelWrite", arg0)
}

// CancelWrite indicates an expected call of CancelWrite.
func (mr *MockSendGroupStreamMockRecorder) CancelWrite(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWrite", reflect.TypeOf((*MockSendGroupStream)(nil).CancelWrite), arg0)
}

// Close mocks base method.
func (m *MockSendGroupStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSendGroupStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSendGroupStream)(nil).Close))
}

// GroupSequence mocks base method.
func (m *MockSendGroupStream) GroupSequence() moqt.GroupSequence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupSequence")
	ret0, _ := ret[0].(moqt.GroupSequence)
	return ret0
}

// GroupSequence indicates an expected call of GroupSequence.
func (mr *MockSendGroupStreamMockRecorder) GroupSequence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupSequence", reflect.TypeOf((*MockSendGroupStream)(nil).GroupSequence))
}

// SetWriteDeadline mocks base method.
func (m *MockSendGroupStream) SetWriteDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockSendGroupStreamMockRecorder) SetWriteDeadline(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockSendGroupStream)(nil).SetWriteDeadline), arg0)
}

// SubscribeID mocks base method.
func (m *MockSendGroupStream) SubscribeID() moqt.SubscribeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeID")
	ret0, _ := ret[0].(moqt.SubscribeID)
	return ret0
}

// SubscribeID indicates an expected call of SubscribeID.
func (mr *MockSendGroupStreamMockRecorder) SubscribeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeID", reflect.TypeOf((*MockSendGroupStream)(nil).SubscribeID))
}

// WriteFrame mocks base method.
func (m *MockSendGroupStream) WriteFrame(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFrame", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFrame indicates an expected call of WriteFrame.
func (mr *MockSendGroupStreamMockRecorder) WriteFrame(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFrame", reflect.TypeOf((*MockSendGroupStream)(nil).WriteFrame), arg0)
}
