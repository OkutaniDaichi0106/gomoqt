// Code generated by MockGen. DO NOT EDIT.
// Source: ../group_reader.go

// Package mock_moqt is a generated GoMock package.
package mock_moqt

import (
	reflect "reflect"
	time "time"

	moqt "github.com/OkutaniDaichi0106/gomoqt/moqt"
	"go.uber.org/mock/gomock"
)

// MockGroupReader is a mock of GroupReader interface.
type MockGroupReader struct {
	ctrl     *gomock.Controller
	recorder *MockGroupReaderMockRecorder
}

// MockGroupReaderMockRecorder is the mock recorder for MockGroupReader.
type MockGroupReaderMockRecorder struct {
	mock *MockGroupReader
}

// NewMockGroupReader creates a new mock instance.
func NewMockGroupReader(ctrl *gomock.Controller) *MockGroupReader {
	mock := &MockGroupReader{ctrl: ctrl}
	mock.recorder = &MockGroupReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupReader) EXPECT() *MockGroupReaderMockRecorder {
	return m.recorder
}

// GroupSequence mocks base method.
func (m *MockGroupReader) GroupSequence() moqt.GroupSequence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupSequence")
	ret0, _ := ret[0].(moqt.GroupSequence)
	return ret0
}

// GroupSequence indicates an expected call of GroupSequence.
func (mr *MockGroupReaderMockRecorder) GroupSequence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupSequence", reflect.TypeOf((*MockGroupReader)(nil).GroupSequence))
}

// ReadFrame mocks base method.
func (m *MockGroupReader) ReadFrame() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrame")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFrame indicates an expected call of ReadFrame.
func (mr *MockGroupReaderMockRecorder) ReadFrame() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrame", reflect.TypeOf((*MockGroupReader)(nil).ReadFrame))
}

// MockReceiveGroupStream is a mock of ReceiveGroupStream interface.
type MockReceiveGroupStream struct {
	ctrl     *gomock.Controller
	recorder *MockReceiveGroupStreamMockRecorder
}

// MockReceiveGroupStreamMockRecorder is the mock recorder for MockReceiveGroupStream.
type MockReceiveGroupStreamMockRecorder struct {
	mock *MockReceiveGroupStream
}

// NewMockReceiveGroupStream creates a new mock instance.
func NewMockReceiveGroupStream(ctrl *gomock.Controller) *MockReceiveGroupStream {
	mock := &MockReceiveGroupStream{ctrl: ctrl}
	mock.recorder = &MockReceiveGroupStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiveGroupStream) EXPECT() *MockReceiveGroupStreamMockRecorder {
	return m.recorder
}

// CancelRead mocks base method.
func (m *MockReceiveGroupStream) CancelRead(arg0 moqt.StreamErrorCode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CancelRead", arg0)
}

// CancelRead indicates an expected call of CancelRead.
func (mr *MockReceiveGroupStreamMockRecorder) CancelRead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRead", reflect.TypeOf((*MockReceiveGroupStream)(nil).CancelRead), arg0)
}

// GroupSequence mocks base method.
func (m *MockReceiveGroupStream) GroupSequence() moqt.GroupSequence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupSequence")
	ret0, _ := ret[0].(moqt.GroupSequence)
	return ret0
}

// GroupSequence indicates an expected call of GroupSequence.
func (mr *MockReceiveGroupStreamMockRecorder) GroupSequence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupSequence", reflect.TypeOf((*MockReceiveGroupStream)(nil).GroupSequence))
}

// ReadFrame mocks base method.
func (m *MockReceiveGroupStream) ReadFrame() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrame")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFrame indicates an expected call of ReadFrame.
func (mr *MockReceiveGroupStreamMockRecorder) ReadFrame() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrame", reflect.TypeOf((*MockReceiveGroupStream)(nil).ReadFrame))
}

// SetReadDeadline mocks base method.
func (m *MockReceiveGroupStream) SetReadDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockReceiveGroupStreamMockRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockReceiveGroupStream)(nil).SetReadDeadline), arg0)
}

// SubscribeID mocks base method.
func (m *MockReceiveGroupStream) SubscribeID() moqt.SubscribeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeID")
	ret0, _ := ret[0].(moqt.SubscribeID)
	return ret0
}

// SubscribeID indicates an expected call of SubscribeID.
func (mr *MockReceiveGroupStreamMockRecorder) SubscribeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeID", reflect.TypeOf((*MockReceiveGroupStream)(nil).SubscribeID))
}
