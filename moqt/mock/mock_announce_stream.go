// Code generated by MockGen. DO NOT EDIT.
// Source: ../announce_stream.go

// Package mock_moqt is a generated GoMock package.
package mock_moqt

import (
	reflect "reflect"

	moqt "github.com/OkutaniDaichi0106/gomoqt/moqt"
	gomock "github.com/golang/mock/gomock"
)

// MockReceiveAnnounceStream is a mock of ReceiveAnnounceStream interface.
type MockReceiveAnnounceStream struct {
	ctrl     *gomock.Controller
	recorder *MockReceiveAnnounceStreamMockRecorder
}

// MockReceiveAnnounceStreamMockRecorder is the mock recorder for MockReceiveAnnounceStream.
type MockReceiveAnnounceStreamMockRecorder struct {
	mock *MockReceiveAnnounceStream
}

// NewMockReceiveAnnounceStream creates a new mock instance.
func NewMockReceiveAnnounceStream(ctrl *gomock.Controller) *MockReceiveAnnounceStream {
	mock := &MockReceiveAnnounceStream{ctrl: ctrl}
	mock.recorder = &MockReceiveAnnounceStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiveAnnounceStream) EXPECT() *MockReceiveAnnounceStreamMockRecorder {
	return m.recorder
}

// ReceiveAnnouncements mocks base method.
func (m *MockReceiveAnnounceStream) ReceiveAnnouncements() ([]moqt.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveAnnouncements")
	ret0, _ := ret[0].([]moqt.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveAnnouncements indicates an expected call of ReceiveAnnouncements.
func (mr *MockReceiveAnnounceStreamMockRecorder) ReceiveAnnouncements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveAnnouncements", reflect.TypeOf((*MockReceiveAnnounceStream)(nil).ReceiveAnnouncements))
}

// MockSendAnnounceStream is a mock of SendAnnounceStream interface.
type MockSendAnnounceStream struct {
	ctrl     *gomock.Controller
	recorder *MockSendAnnounceStreamMockRecorder
}

// MockSendAnnounceStreamMockRecorder is the mock recorder for MockSendAnnounceStream.
type MockSendAnnounceStreamMockRecorder struct {
	mock *MockSendAnnounceStream
}

// NewMockSendAnnounceStream creates a new mock instance.
func NewMockSendAnnounceStream(ctrl *gomock.Controller) *MockSendAnnounceStream {
	mock := &MockSendAnnounceStream{ctrl: ctrl}
	mock.recorder = &MockSendAnnounceStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendAnnounceStream) EXPECT() *MockSendAnnounceStreamMockRecorder {
	return m.recorder
}

// AnnounceConfig mocks base method.
func (m *MockSendAnnounceStream) AnnounceConfig() moqt.AnnounceConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnnounceConfig")
	ret0, _ := ret[0].(moqt.AnnounceConfig)
	return ret0
}

// AnnounceConfig indicates an expected call of AnnounceConfig.
func (mr *MockSendAnnounceStreamMockRecorder) AnnounceConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnnounceConfig", reflect.TypeOf((*MockSendAnnounceStream)(nil).AnnounceConfig))
}

// Close mocks base method.
func (m *MockSendAnnounceStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSendAnnounceStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSendAnnounceStream)(nil).Close))
}

// CloseWithError mocks base method.
func (m *MockSendAnnounceStream) CloseWithError(arg0 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWithError", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWithError indicates an expected call of CloseWithError.
func (mr *MockSendAnnounceStreamMockRecorder) CloseWithError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWithError", reflect.TypeOf((*MockSendAnnounceStream)(nil).CloseWithError), arg0)
}

// SendAnnouncement mocks base method.
func (m *MockSendAnnounceStream) SendAnnouncement(announcements []moqt.Announcement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAnnouncement", announcements)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAnnouncement indicates an expected call of SendAnnouncement.
func (mr *MockSendAnnounceStreamMockRecorder) SendAnnouncement(announcements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAnnouncement", reflect.TypeOf((*MockSendAnnounceStream)(nil).SendAnnouncement), announcements)
}
